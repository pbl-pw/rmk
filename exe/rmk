#!/usr/bin/env ruby

require 'optparse'
require 'iniparse'
require "rmk"

options = {}
parser = OptionParser.new{ |opts|
	opts.summary_width = 48
	opts.banner = 'Usage: rmk [Options] [targets]'
	opts.separator ''
	opts.on '-O', '--outdir=dir', 'output root dir,can be absolute or relative to pwd,default _Build' do |dir|
		options[:outroot] = dir
	end
	opts.on '-S', '--srcdir=dir', 'source root dir,can be absolute or relative to output root(start with ..),default ..' do |dir|
		options[:srcroot] = dir
	end
	opts.on '-V', '--variant [x,y,z]', Array, 'variant list to build, empty for build all variants' do |list|
		options[:variants] = list || []
	end
	opts.on '-h', '--help', 'show this help' do
		puts opts
		exit
	end
	opts.on '-v', '--version', 'show version' do
		puts 'rmk 0.2.0', ''
		exit
	end
}
targets = parser.parse(ARGV)
if options[:variants]
	raise "variants config file 'variants.rmk' not exist" unless File.exist? 'variants.rmk'
	inifile = IniParse.open 'variants.rmk'
	targets = targets.map{|tgt| %|"#{tgt}"|}.join ' '
	exe = File.join RbConfig::CONFIG['bindir'], RbConfig::CONFIG['ruby_install_name']
	thrs = []
	(options[:variants].empty? ? inifile : options[:variants].map!{|vn|
		variant = inifile[vn]
		warn "variant '#{vn}' doesn't exist" unless variant
		variant
	}).each do |variant|
		next unless variant
		thrs << Thread.new{ system %|"#{exe}" "#{__FILE__}" -O"#{variant['outdir']}" -S"#{variant['srcdir']}" #{targets}|}
	end
	thrs.each{|thr| thr.join}
	exit
end
if File.exist? 'ini.rmk'
	inifile = IniParse.open 'ini.rmk'
	dir, link = inifile['Outdir']['Path'], inifile['Outdir']['LinkTo']
	if link
		require 'fileutils'
		link = link.gsub(/\$(?:(\$)|{(.*?)})/){$1 || ENV[$2]}.gsub! ?\/, ?\\
		FileUtils.mkpath link unless Dir.exist? link
		if File.symlink? dir
			if File.readlink(dir) != link
				Dir.rmdir dir
				File.symlink link, dir
			end
		elsif Dir.exist?(dir) || File.exist?(dir)
			raise "need symlink '#{dir}' as outroot, but file(or dir) '#{dir}' already exist"
		else
			FileUtils.mkpath File.dirname dir
			File.symlink link, dir
		end
	else
		FileUtils.mkpath dir
	end
	options[:srcroot] ||= inifile['Srcdir']['Path']
	options[:outroot] ||= dir
end
rmk = Rmk.new srcroot:options[:srcroot] || '..', outroot:options[:outroot] || '_Build'
rmk.parse
rmk.build *targets
