#!/usr/bin/env ruby

require 'optparse'
require "rmk"

options = {}
cache_options = {}
parser = OptionParser.new{ |opts|
	opts.summary_width = 48
	opts.banner = 'Usage: rmk [Options] [targets]'
	opts.separator 'repository options:'
	opts.on '-C', '--directory=dir', 'repository root dir, will change to this dir before other operation, default pwd' do |dir|
		options[:prjroot] = dir
	end

	opts.separator 'directory options(will be cached when seted):'
	opts.on '-O', '--outdir=dir', 'output root dir, can be absolute or relative to repository root, default _Build' do |dir|
		cache_options[:outroot] = dir
	end
	opts.on '-S', '--srcdir=dir', 'source root dir, can be absolute or relative to output root(start with ..), default ..' do |dir|
		cache_options[:srcroot] = dir
	end
	opts.on '--link-outdir=dir', 'symbol link outdir to this dir, default <system temp dir>/<repository name>, set / to disable' do |dir|
		cache_options[:link] = dir
	end
	opts.on '--name=name', "repository name, default repository root dir's name" do |name| cache_options[:name] = name end

	opts.separator 'variant options:'
	opts.on '-V', '--variant x,y,z', Array, 'variant list to build' do |list|
		options[:variants] = list
	end

	opts.separator 'info options:'
	opts.on '-h', '--help', 'show this help' do
		puts opts
		exit
	end
	opts.on '-v', '--version', 'show version' do
		puts 'rmk 0.2.0', ''
		exit
	end
}
targets = parser.parse(ARGV)
Dir.chdir options[:prjroot] if options[:prjroot]
options_file = '.rmk/options'
loaded_options = File.exist?(options_file) ? Marshal.load(IO.binread options_file) : {}
if cache_options.empty?
	cache_options = loaded_options
elsif cache_options.any?{|k, v| v != loaded_options[k]}
	Dir.mkdir '.rmk' unless Dir.exist? '.rmk'
	IO.binwrite options_file, Marshal.dump(cache_options)
end
srcroot = cache_options[:srcroot] || '..'
outroot = cache_options[:outroot] || '_Build'
link = cache_options[:link] || File.join(ENV['TMP'], cache_options[:name] || File.basename(Dir.pwd))
if link && link != '/'
	require 'fileutils'
	link = link.gsub(/\$(?:(\$)|{(.*?)})/){$1 || ENV[$2]}.gsub! ?\\, ?\/
	FileUtils.mkpath link unless Dir.exist? link
	if File.symlink? outroot
		if File.readlink(outroot) != link
			Dir.rmdir outroot
			File.symlink link, outroot
		end
	elsif Dir.exist?(outroot) || File.exist?(outroot)
		raise "need symlink '#{outroot}' as outroot, but file(or dir) '#{outroot}' already exist"
	else
		FileUtils.mkpath File.dirname outroot
		File.symlink link, outroot
	end
else
	FileUtils.mkpath outroot
end
variants = options[:variants]
if variants
	if variants.size == 1
		variants = variants[0]
		outroot = File.join outroot, variants
		srcroot = File.join '..', srcroot unless srcroot.match?(/^[a-z]:\//i)
	else
		targets = targets.map{|tgt| %|"#{tgt}"|}.join ' '
		exe = File.join RbConfig::CONFIG['bindir'], RbConfig::CONFIG['ruby_install_name']
		thrs = []
		variants.each {|name| thrs << Thread.new {system %|"#{exe}" "#{__FILE__}" -V #{name} #{targets}|}}
		thrs.each{|thr| thr.join}
		exit
	end
end
rmk = Rmk.new srcroot:srcroot, outroot:outroot, variant:variants
rmk.parse
rmk.build *targets
